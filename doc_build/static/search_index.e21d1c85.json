[{"id":0,"title":"柱状图","content":"#\n\n\n\n\n属性支持#\n\n属性                  说明           类型                                                  默认值\nmargin              图表与容器的边距     ?number                                             30\nbarColor            柱状颜色         ?string[]                                           ['#4A90E2', '#7ED321', '#F5A623']\nanimation           是否开启动画       ?boolean                                            true\nanimationDuration   动画持续时间（ms）   ?number                                             1000\nlabelStyle          坐标轴字体样式      ?{fontSize:number,fontFamily:string,color:string}   {fontSize:12,fontFamily:默认字体,color:#333}\naxisStyle           坐标轴样式        ?{color:string,lineWidth:number}                    {color:#666,lineWidth:1 }\ndata                数据           { label:string｜number, value: number }[]            无","routePath":"/components/Bar","lang":"","toc":[{"text":"属性支持","id":"属性支持","depth":2,"charIndex":5}],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"Circle圆形","content":"#\n\n\n示例#\n\n\n\n\n属性设置#\n\n当我们想修改矩形的某一项属性时，可以通过节点内置的setAttr方法修改节点的属性，示例如下:\n\n\n\n\n坐标#\n\n同样的我们可以通过设置x,y来修改节点的位置，和矩形不同的是，xy坐标是圆心的位置。示例如下：\n\n\n\n\n尺寸#\n\n可以通过设置radius来设置圆半径来展示不同尺寸的圆。示例如下：\n\n\n\n\n样式#\n\n可以通过设置borderColor、borderWidth和radius来实现更丰富的样式实现。示例如下：\n\n\n\n\n透明度#\n\n可以通过设置opcity修改图形的透明度。下面我们来对比一下两个圆这只不同透明度的区别：\n\n\n\n\n属性支持#\n\n属性            说明      类型        默认值\nx             圆心x坐标   ?number   0\ny             圆心y坐标   ?number   0\nradius        半径      ?number   50\nfillStyle     填充色     ?string   \"blue\"\nborderColor   边框颜色    ?string   \"rgba(0,0,0,0)\"\nborderWidth   边框宽度    ?number   0\nzIndex        层级      ?number   0\nopcity        透明度     ?number   1","routePath":"/components/Circle","lang":"","toc":[{"text":"示例","id":"示例","depth":2,"charIndex":3},{"text":"属性设置","id":"属性设置","depth":2,"charIndex":11},{"text":"坐标","id":"坐标","depth":2,"charIndex":70},{"text":"尺寸","id":"尺寸","depth":2,"charIndex":127},{"text":"样式","id":"样式","depth":2,"charIndex":170},{"text":"透明度","id":"透明度","depth":2,"charIndex":233},{"text":"属性支持","id":"属性支持","depth":2,"charIndex":288}],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"","content":"曲线图#\n\n我们可以通过这只options中的smooth来设置为平滑的曲线。示例如下：\n\n\n\n\n属性支持#\n\n属性            说明         类型                                                  默认值\nmargin        图表与容器的边距   ?number                                             30\nlineColor     线条颜色       ?string                                             blue\npointRadius   线条连接点半径    ?number                                             0\nlabelStyle    坐标轴字体样式    ?{fontSize:number,fontFamily:string,color:string}   {fontSize:12,fontFamily:默认字体,color:#333}\naxisStyle     坐标轴样式      ?{color:string,lineWidth:number}                    {color:#666,lineWidth:1 }\ndata          数据         { label:string｜number, value: number }[]            无","routePath":"/components/Curve","lang":"","toc":[{"text":"曲线图","id":"曲线图","depth":2,"charIndex":-1},{"text":"属性支持","id":"属性支持","depth":2,"charIndex":48}],"domain":"","frontmatter":{},"version":""},{"id":3,"title":"Line线条","content":"#\n\n\n示例#\n\n\n\n\n不同类型的曲线#\n\n我们可以通过lineType配合不同的属性来绘制二次贝塞尔曲线和三次贝塞尔曲线。示例如下：\n\n\n\n\n属性支持#\n\n属性          说明                                        类型                           默认值\nx1          起始点x坐标                                    ?number                      0\ny1          起始点y坐标                                    ?number                      0\nx2          终点x坐标                                     ?number                      0\ny2          终点y坐标                                     ?number                      0\nlineType    绘制线条的类型                                   ? line | quadratic | cubic   line\ncontrol1    绘制贝塞尔曲线的第一个拐点，lineType = quadratic时为必填项   ?{x:number,y:number}         \ncontrol2    绘制贝塞尔曲线的第二个拐点，lineType = cubic时为必填项       ?{x:number,y:number}         \nfillStyle   线条颜色                                      ?string                      blue\nlineWidth   边框宽度                                      ?number                      1\nzIndex      层级                                        ?number                      0\nopcity      透明度                                       ?number                      1","routePath":"/components/Line","lang":"","toc":[{"text":"示例","id":"示例","depth":2,"charIndex":3},{"text":"不同类型的曲线","id":"不同类型的曲线","depth":2,"charIndex":11},{"text":"属性支持","id":"属性支持","depth":2,"charIndex":71}],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"折线图","content":"#\n\n\n示例#\n\n\n\n\n数据点#\n\n我们可以通过设置options中的pointRadius来为数据添加标记点。示例如下：\n\n\n\n\ndataZoom#\n\n我们可以通过设置options中的dataZoom属性来为图表添加缩放组件。示例如下：\n\n\n\n\n属性支持#\n\n属性            说明          类型                                                  默认值\nmargin        图表与容器的边距    ?number                                             30\nlineColor     线条颜色        ?string                                             blue\npointRadius   线条连接点半径     ?number                                             0\nlabelStyle    坐标轴字体样式     ?{fontSize:number,fontFamily:string,color:string}   {fontSize:12,fontFamily:默认字体,color:#333}\naxisStyle     坐标轴样式       ?{color:string,lineWidth:number}                    {color:#666,lineWidth:1 }\ndataZoom      数据区域缩放的组件   { show:boolean, dataRange: number }                 { show:false, dataRange: 5\ndata          数据          { label:string｜number, value: number }[]            无","routePath":"/components/LineChart","lang":"","toc":[{"text":"示例","id":"示例","depth":2,"charIndex":3},{"text":"数据点","id":"数据点","depth":2,"charIndex":11},{"text":"dataZoom","id":"datazoom","depth":2,"charIndex":65},{"text":"属性支持","id":"属性支持","depth":2,"charIndex":124}],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"饼图","content":"#\n\n\n示例#\n\n\n\n\n属性支持#\n\n属性            说明         类型                                                  默认值\nmargin        图表与容器的边距   ?number                                             30\nradius        饼图半径       ?number                                             150\ninnerRadius   内圆半径       ?number                                             0（表示无内圆环）\ncolors        饼图颜色       ?string[]                                           ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEEAD']\nlabelStyle    坐标轴字体样式    ?{fontSize:number,fontFamily:string,color:string}   {fontSize:12,fontFamily:默认字体,color:#333}\ndata          数据         { label:string｜number, value: number }[]            无","routePath":"/components/Pie","lang":"","toc":[{"text":"示例","id":"示例","depth":2,"charIndex":3},{"text":"属性支持","id":"属性支持","depth":2,"charIndex":11}],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"Rect矩形","content":"#\n\n\n示例#\n\n\n\n\n属性设置#\n\n当我们想修改矩形的某一项属性时，可以通过节点内置的setAttr方法修改节点的属性，示例如下:\n\n\n\n\n坐标#\n\n同样的我们可以通过设置x,y来修改节点的位置，这在日常开发动画的时候非常哟用。下面我们使用一段动画示例来展示一下：\n\n\n\n\n尺寸#\n\n可以通过设置width和 height来展示不同尺寸的图形\n\n\n\n\n样式#\n\n可以通过设置borderColor、borderWidth和radius来实现更丰富的样式实现。\n\n\n\n\n透明度#\n\n可以通过设置opcity修改图形的透明度。 我们可以做一个呼吸灯示例：\n\n\noptions#\n\n属性            说明     类型        默认值\nx             x坐标    ?number   0\ny             y坐标    ?number   0\nwidth         宽      ?number   100\nheight        高      ?number   100\nfillStyle     填充色    ?string   \"blue\"\nborderColor   边框颜色   ?string   \"rgba(0,0,0,0)\"\nborderWidth   边框宽度   ?number   0\nradius        图形圆角   ?number   0\nzIndex        层级     ?number   0\nopcity        透明度    ?number   1","routePath":"/components/Rect","lang":"","toc":[{"text":"示例","id":"示例","depth":2,"charIndex":3},{"text":"属性设置","id":"属性设置","depth":2,"charIndex":11},{"text":"坐标","id":"坐标","depth":2,"charIndex":70},{"text":"尺寸","id":"尺寸","depth":2,"charIndex":137},{"text":"样式","id":"样式","depth":2,"charIndex":176},{"text":"透明度","id":"透明度","depth":2,"charIndex":234},{"text":"options","id":"options","depth":2,"charIndex":278}],"domain":"","frontmatter":{},"version":""},{"id":7,"title":"圆环图","content":"#\n\n\n示例#\n\n\n\n\n属性支持#\n\n属性            说明         类型                                                  默认值\nmargin        图表与容器的边距   ?number                                             30\nradius        饼图半径       ?number                                             150\ninnerRadius   内圆半径       ?number                                             0（表示无内圆环）\ncolors        饼图颜色       ?string[]                                           ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEEAD']\nlabelStyle    坐标轴字体样式    ?{fontSize:number,fontFamily:string,color:string}   {fontSize:12,fontFamily:默认字体,color:#333}\ndata          数据         { label:string｜number, value: number }[]            无","routePath":"/components/Ring","lang":"","toc":[{"text":"示例","id":"示例","depth":2,"charIndex":3},{"text":"属性支持","id":"属性支持","depth":2,"charIndex":11}],"domain":"","frontmatter":{},"version":""},{"id":8,"title":"Sector扇形","content":"#\n\n\n示例#\n\n\n\n\n属性设置#\n\n当我们想修改矩形的某一项属性时，可以通过节点内置的setAttr方法修改节点的属性，示例如下:\n\n\n\n\n坐标#\n\n同样的我们可以通过设置x,y来修改节点的位置，和圆形一样，扇形也是xy坐标是圆心的位置。示例如下：\n\n\n\n\n尺寸#\n\n可以通过设置radius来设置圆半径来展示不同尺寸的圆。示例如下：\n\n\n\n\n样式#\n\n可以通过设置borderColor、borderWidth和radius来实现更丰富的样式实现。示例如下：\n\n\n\n\n透明度#\n\n可以通过设置opcity修改图形的透明度。下面我们来对比一下两个圆这只不同透明度的区别：\n\n\n\n\n属性支持#\n\n属性            说明     类型        默认值\nx             x坐标    ?number   0\ny             y坐标    ?number   0\nradius        半径     ?number   50\nfillStyle     填充色    ?string   \"blue\"\nborderColor   边框颜色   ?string   \"rgba(0,0,0,0)\"\nstartAngle    起始角度   ?number   0\nendAngle      结束角度   ?number   Math.PI * 1.5\nzIndex        层级     ?number   0\nopcity        透明度    ?number   1","routePath":"/components/Sector","lang":"","toc":[{"text":"示例","id":"示例","depth":2,"charIndex":3},{"text":"属性设置","id":"属性设置","depth":2,"charIndex":11},{"text":"坐标","id":"坐标","depth":2,"charIndex":70},{"text":"尺寸","id":"尺寸","depth":2,"charIndex":129},{"text":"样式","id":"样式","depth":2,"charIndex":172},{"text":"透明度","id":"透明度","depth":2,"charIndex":235},{"text":"属性支持","id":"属性支持","depth":2,"charIndex":290}],"domain":"","frontmatter":{},"version":""},{"id":9,"title":"动画","content":"#\n\n日常图形开发中，动画也是必不可少的。在graphify-chart的中我们内置了动画方法，使用起来非常简单，我们只需要传入节点，动画时长，变化的属性即可。\n性能问题(详见性能)。\n\n\n\n同时我们也支持多种动画曲线。 ease‌\n\n\n\nease-in\n\n\n\nease-out\n\n\n\nease-in-out\n\n\n\nbounce\n\n","routePath":"/design/animation","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":10,"title":"Group分组","content":"#\n\n在graphify-chart的定义中，Stage中的节点都是扁平化的，所有的节点都是兄弟节点。但有些时候我们需要对某些元素进行统一处理，所以我们引入了Grou\np分组的概念。\n\nGroup可以把所有的子节点当作一个整体操作。例如下面的例子，我们把绿色和粉色的矩形放进Group里，当我们对分组进行拖拽时，分组里的子节点也会跟着一起移动。\n示例如下：\n\n","routePath":"/design/group","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":11,"title":"graphify-chart","content":"#\n\ngraphify-chart是基于原声canvas设计的图形组件库，适用于敏捷开发图形及图表组件。\n\n\n我们为什么要开发graphify-chart#\n\n在我们日常开发中，碰到图形或图表需求时我们使用市面的图表组件库时遇到的痛点：\n\n * 定制化成本过高 配置是api对简单需求比较友好，面对高定制化需求需要大量维护成本，甚至无法实现\n * 包体积与加载速度瓶颈 大部分数据可视化工具体积通常在500kb+，即便使用Tree Shaking优化后仍超过300kb\n * 动态交互扩展性差 对动态交互（如画布元素自由拖拽、多图表联动、自定义动画）的支持有限，API 灵活性不足。\n * 渲染层控制权缺失 难以与其他图形库深度整合；无法彻底解决跨端渲染一致性\n\n\n特性#\n\n * 自研轻量图形渲染引擎\n * 开箱即用，无需深度学习api\n * 包体积与维护可控性\n * 内置高性能动画api\n * 兼容性强，兼容现代浏览器及大部分前端框架\n\n\n版本#\n\nhttps://www.npmjs.com/package/graphify-chart\n\n\n安装#\n\n使用 npm 或 yarn 或 pnpm 安装#\n\n我们推荐使用 npm 或 yarn 或 pnpm\n的方式进行开发，不仅可在开发环境轻松调试，也可放心地在生产环境打包部署使用，享受整个生态圈和工具链带来的诸多好处。\n\n使用npm\n\n\n\n使用yarn\n\n\n\n使用pnpm\n\n","routePath":"/design/introduce","lang":"","toc":[{"text":"我们为什么要开发graphify-chart","id":"我们为什么要开发graphify-chart","depth":3,"charIndex":54},{"text":"特性","id":"特性","depth":3,"charIndex":332},{"text":"版本","id":"版本","depth":3,"charIndex":422},{"text":"安装","id":"安装","depth":3,"charIndex":474},{"text":"使用 npm 或 yarn 或 pnpm 安装","id":"使用-npm-或-yarn-或-pnpm-安装","depth":4,"charIndex":479}],"domain":"","frontmatter":{},"version":""},{"id":12,"title":"节点","content":"#\n\ngraphify-chart中的图表、图形、图形组或其他组合组都是虚拟节点，类似于 HTML 页面中的 DOM 节点。\n\n和DOM不同，在graphify-chart中我们采用了扁平的方式管理节点，因此在大多数情况下，所有的节点都是兄弟节点的关系。在性能表现上，这种方式优势非常大。\n\nWARNING\n\n除Stage Group外，其他所有节点都不支持appendChild方法\n\n因此，我们在使用时，也不需要考虑那么复杂的布局规则，可以直接按照绝对定位的思路来布局。\n\n当然，开发者可以基于自己的基础组件扩展布局方式。\n\n除此之外，在某些部分复杂的场景，我们引入了 Group 的概念来管理组件。但是一定要注意的是，Group\n本身不是一个元素节点，他只是负责给元素分组方便统一管理。例如统一拖拽。\n\n示例如下：\n\n\n\nGroup 组件不影响组件的布局。不参与组件的渲染。\n\n节点之间，我们设计了 zIndex 属性来管理层级关系。我们可以直接简单的通过修改 zIndex\n的值，来修改元素之间的遮挡关系。由于所有的可视节点都是扁平的，因此节点的关系就是直接比较大小即可。\n\n","routePath":"/design/node","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":13,"title":"Stage舞台","content":"#\n\n在中Stage是所有图形、图表、图组的顶层节点（所有图形、图表、图组都同意称为节点）容器，用于表示节点可绘制区域。所有的节点都必须绘制在Stage下，示例如下：\n\n\n\n\n添加多个节点#\n\n\n\n\n属性支持#\n\n属性               说明       类型               默认值\ncontoiner        容器       Element          \nwidth            宽度       ?number          默认容器宽度\nheight           高度       ?number          默认容器高度\ndownloadOption   下载图片属性   DownliadOption   默认值见下方\n\n\nDownliadOption#\n\n属性        说明       类型        默认值\nshow      是否显示     boolean   true\nimgType   图片类型     ?string   png（参考canvas.toDataURL支持的图片类型）\ntitle     图片名称     ?string   图形\nicon      下载icon   ?string   dom字符串","routePath":"/design/stage","lang":"","toc":[{"text":"添加多个节点","id":"添加多个节点","depth":2,"charIndex":87},{"text":"属性支持","id":"属性支持","depth":2,"charIndex":99},{"text":"DownliadOption","id":"downliadoption","depth":2,"charIndex":349}],"domain":"","frontmatter":{},"version":""},{"id":14,"title":"zIndex层级","content":"#\n\n在graphify-chart中我们通过zIndex来管理节点之间的层级，每个节点都支持基础属性zIndex。同时我们可以通过修改节点的zIndex属性来修改层\n级，示例如下：\n\n","routePath":"/design/zIndex","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":15,"title":"","content":"","routePath":"/foo","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":16,"title":"Markdown & MDX","content":"#\n\nRspress supports not only Markdown but also MDX, a powerful way to develop\ncontent.\n\n\nMarkdown#\n\nMDX is a superset of Markdown, which means you can write Markdown files as\nusual. For example:\n\n\n\n\nUse component#\n\nWhen you want to use React components in Markdown files, you should name your\nfiles with .mdx extension. For example:\n\n\n\n\nFront matter#\n\nYou can add Front Matter at the beginning of your Markdown file, which is a\nYAML-formatted object that defines some metadata. For example:\n\n\n\n> Note: By default, Rspress uses h1 headings as html headings.\n\nYou can also access properties defined in Front Matter in the body, for example:\n\n\n\nThe previously defined properties will be passed to the component as frontmatter\nproperties. So the final output will be:\n\n\n\n\nCustom container#\n\nYou can use the ::: syntax to create custom containers and support custom\ntitles. For example:\n\nInput:\n\n\n\nOutput:\n\nTIP\n\nThis is a block of type tip\n\nINFO\n\nThis is a block of type info\n\nWARNING\n\nThis is a block of type warning\n\nDANGER\n\nThis is a block of type danger\n\nDETAILS\n\nThis is a block of type details\n\nCustom Title\n\nThis is a block of Custom Title\n\nCustom Title\n\nThis is a block of Custom Title\n\n\nCode block#\n\n\nBasic usage#\n\nYou can use the ``` syntax to create code blocks and support custom titles. For\nexample:\n\nInput:\n\n\n\nOutput:\n\n\n\n\n\n\nShow line numbers#\n\nIf you want to display line numbers, you can enable the showLineNumbers option\nin the config file:\n\n\n\n\nWrap code#\n\nIf you want to wrap long code line by default, you can enable the\ndefaultWrapCode option in the config file:\n\n\n\n\nLine highlighting#\n\nYou can also apply line highlighting and code block title at the same time, for\nexample:\n\nInput:\n\n\n\nOutput:\n\n\n\n\nRustify MDX compiler#\n\nYou can enable Rustify MDX compiler by following config:","routePath":"/guide/","lang":"","toc":[{"text":"Markdown","id":"markdown","depth":2,"charIndex":88},{"text":"Use component","id":"use-component","depth":2,"charIndex":198},{"text":"Front matter","id":"front-matter","depth":2,"charIndex":336},{"text":"Custom container","id":"custom-container","depth":2,"charIndex":767},{"text":"Code block","id":"code-block","depth":2,"charIndex":1190},{"text":"Basic usage","id":"basic-usage","depth":3,"charIndex":1204},{"text":"Show line numbers","id":"show-line-numbers","depth":3,"charIndex":1332},{"text":"Wrap code","id":"wrap-code","depth":3,"charIndex":1455},{"text":"Line highlighting","id":"line-highlighting","depth":3,"charIndex":1580},{"text":"Rustify MDX compiler","id":"rustify-mdx-compiler","depth":2,"charIndex":1712}],"domain":"","frontmatter":{},"version":""},{"id":17,"title":"Hello world!","content":"#\n\n\nStart#\n\nWrite something to build your own docs! 🎁","routePath":"/hello","lang":"","toc":[{"text":"Start","id":"start","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":19,"title":"随机元素动画","content":"#\n\n2000个随机节点动画渲染流畅。\n\n在动画方法封装中，我们使用批处理机制，不论有多少个节点在运行动画，我们都只有一个动画进程，这样使得性能方面的表现非常优异。\n\n","routePath":"/perfomance/circleRandom","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":20,"title":"高性能表现","content":"#\n\n","routePath":"/perfomance/nodes","lang":"","toc":[],"domain":"","frontmatter":{},"version":""}]