[{"id":0,"title":"Rect矩形","content":"#\n\n\n示例#\n\n\n\n\n属性支持#\n\n属性         说明         类型                                         默认值\nmargin     图表与容器的边距   ?number                                    30\nbarColor   柱状颜色       ?string[]                                  ['#4A90E2', '#7ED321', '#F5A623']\ndata       数据         { label:string｜number, value: number }[]   无","routePath":"/components/Bar","lang":"","toc":[{"text":"示例","id":"示例","depth":2,"charIndex":3},{"text":"属性支持","id":"属性支持","depth":2,"charIndex":11}],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"Circle圆形","content":"#\n\n\n示例#\n\n\n\n\n属性支持#\n\n属性            说明      类型        默认值\nx             圆心x坐标   ?number   0\ny             圆心y坐标   ?number   0\nradius        半径      ?number   50\nfillStyle     填充色     ?string   \"blue\"\nborderColor   边框颜色    ?string   \"rgba(0,0,0,0)\"\nborderWidth   边框宽度    ?number   0\nzIndex        层级      ?number   0","routePath":"/components/Circle","lang":"","toc":[{"text":"示例","id":"示例","depth":2,"charIndex":3},{"text":"属性支持","id":"属性支持","depth":2,"charIndex":11}],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"Line线条","content":"#\n\n\n示例#\n\n\n\n\n属性支持#\n\n属性            说明       类型        默认值\nx1            起始点x坐标   ?number   0\ny1            起始点y坐标   ?number   0\nx2            终点x坐标    ?number   0\ny2            终点y坐标    ?number   0\nborderColor   线条颜色     ?string   \"blue\"\nlineWidth     边框宽度     ?number   1\nzIndex        层级       ?number   0","routePath":"/components/Line","lang":"","toc":[{"text":"示例","id":"示例","depth":2,"charIndex":3},{"text":"属性支持","id":"属性支持","depth":2,"charIndex":11}],"domain":"","frontmatter":{},"version":""},{"id":3,"title":"Rect矩形","content":"#\n\n\n示例#\n\n\n\n\n属性支持#\n\n属性            说明         类型                                         默认值\nmargin        图表与容器的边距   ?number                                    30\nlineColor     线条颜色       ?string                                    blue\npointRadius   线条连接点半径    ?number                                    0\ndata          数据         { label:string｜number, value: number }[]   无","routePath":"/components/LineChart","lang":"","toc":[{"text":"示例","id":"示例","depth":2,"charIndex":3},{"text":"属性支持","id":"属性支持","depth":2,"charIndex":11}],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"Rect矩形","content":"#\n\n\n示例#\n\n\n\n\n属性支持#\n\n属性            说明         类型                                         默认值\nmargin        图表与容器的边距   ?number                                    30\nradius        饼图半径       ?number                                    150\ninnerRadius   内圆半径       ?number                                    0（表示无内圆环）\ncolors        饼图颜色       ?string[]                                  ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEEAD']\ndata          数据         { label:string｜number, value: number }[]   无","routePath":"/components/Pie","lang":"","toc":[{"text":"示例","id":"示例","depth":2,"charIndex":3},{"text":"属性支持","id":"属性支持","depth":2,"charIndex":11}],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"Rect矩形","content":"#\n\n\n示例#\n\n\n\n\n属性支持#\n\n属性            说明     类型        默认值\nx             x坐标    ?number   0\ny             y坐标    ?number   0\nwidth         宽      ?number   100\nheight        高      ?number   100\nfillStyle     填充色    ?string   \"blue\"\nborderColor   边框颜色   ?string   \"rgba(0,0,0,0)\"\nborderWidth   边框宽度   ?number   0\nradius        图形圆角   ?number   0\nzIndex        层级     ?number   0","routePath":"/components/Rect","lang":"","toc":[{"text":"示例","id":"示例","depth":2,"charIndex":3},{"text":"属性支持","id":"属性支持","depth":2,"charIndex":11}],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"Rect矩形","content":"#\n\n\n示例#\n\n\n\n\n属性支持#\n\n属性            说明         类型                                         默认值\nmargin        图表与容器的边距   ?number                                    30\nradius        饼图半径       ?number                                    150\ninnerRadius   内圆半径       ?number                                    0（表示无内圆环）\ncolors        饼图颜色       ?string[]                                  ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEEAD']\ndata          数据         { label:string｜number, value: number }[]   无","routePath":"/components/Ring","lang":"","toc":[{"text":"示例","id":"示例","depth":2,"charIndex":3},{"text":"属性支持","id":"属性支持","depth":2,"charIndex":11}],"domain":"","frontmatter":{},"version":""},{"id":7,"title":"Sector扇形","content":"#\n\n\n示例#\n\n\n\n\n属性支持#\n\n属性            说明     类型        默认值\nx             x坐标    ?number   0\ny             y坐标    ?number   0\nradius        半径     ?number   50\nfillStyle     填充色    ?string   \"blue\"\nborderColor   边框颜色   ?string   \"rgba(0,0,0,0)\"\nstartAngle    起始角度   ?number   0\nendAngle      结束角度   ?number   Math.PI * 1.5\nzIndex        层级     ?number   0","routePath":"/components/Sector","lang":"","toc":[{"text":"示例","id":"示例","depth":2,"charIndex":3},{"text":"属性支持","id":"属性支持","depth":2,"charIndex":11}],"domain":"","frontmatter":{},"version":""},{"id":8,"title":"Group分组","content":"#\n\n在graphify-chart的定义中，Stage中的节点都是扁平化的，所有的节点都是兄弟节点。但有些时候我们需要对某些元素进行统一处理，所以我们引入了Grou\np分组的概念。\n\nGroup可以把所有的子节点当作一个整体操作。例如下面的例子，我们把绿色和粉色的矩形放进Group里，当我们对分组进行拖拽时，分组里的子节点也会跟着一起移动。\n示例如下：\n\n","routePath":"/design/group","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":9,"title":"节点","content":"#\n\ngraphify-chart中的图表、图形、图形组或其他组合组都是虚拟节点，类似于 HTML 页面中的 DOM 节点。\n\n和DOM不同，在graphify-chart中我们采用了扁平的方式管理节点，因此在大多数情况下，所有的节点都是兄弟节点的关系。在性能表现上，这种方式优势非常大。\n\nWARNING\n\n除Stage Group外，其他所有节点都不支持appendChild方法\n\n因此，我们在使用时，也不需要考虑那么复杂的布局规则，可以直接按照绝对定位的思路来布局。\n\n当然，开发者可以基于自己的基础组件扩展布局方式。\n\n除此之外，在某些部分复杂的场景，我们引入了 Group 的概念来管理组件。但是一定要注意的是，Group\n本身不是一个元素节点，他只是负责给元素分组方便统一管理。例如统一拖拽。\n\n示例如下：\n\n\n\nGroup 组件不影响组件的布局。不参与组件的渲染。\n\n节点之间，我们设计了 zIndex 属性来管理层级关系。我们可以直接简单的通过修改 zIndex\n的值，来修改元素之间的遮挡关系。由于所有的可视节点都是扁平的，因此节点的关系就是直接比较大小即可。\n\n","routePath":"/design/node","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":10,"title":"Stage舞台","content":"#\n\n在中Stage是所有图形、图表、图组的顶层节点（所有图形、图表、图组都同意称为节点）容器，用于表示节点可绘制区域。所有的节点都必须绘制在Stage下，示例如下：\n\n\n\n\n添加多个节点#\n\n\n\n\n属性支持#\n\n属性          说明       类型        默认值\ncontoiner   rongqi   Element   \nwidth       宽度       ?number   默认容器宽度\nheight      高度       ?number   默认容器高度","routePath":"/design/stage","lang":"","toc":[{"text":"添加多个节点","id":"添加多个节点","depth":2,"charIndex":87},{"text":"属性支持","id":"属性支持","depth":2,"charIndex":99}],"domain":"","frontmatter":{},"version":""},{"id":11,"title":"zIndex层级","content":"#\n\n在graphify-chart中我们通过zIndex来管理节点之间的层级，每个节点都支持基础属性zIndex。同时我们可以通过修改节点的zIndex属性来修改层\n级，示例如下：\n\n","routePath":"/design/zIndex","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":12,"title":"","content":"","routePath":"/foo","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":13,"title":"Markdown & MDX","content":"#\n\nRspress supports not only Markdown but also MDX, a powerful way to develop\ncontent.\n\n\nMarkdown#\n\nMDX is a superset of Markdown, which means you can write Markdown files as\nusual. For example:\n\n\n\n\nUse component#\n\nWhen you want to use React components in Markdown files, you should name your\nfiles with .mdx extension. For example:\n\n\n\n\nFront matter#\n\nYou can add Front Matter at the beginning of your Markdown file, which is a\nYAML-formatted object that defines some metadata. For example:\n\n\n\n> Note: By default, Rspress uses h1 headings as html headings.\n\nYou can also access properties defined in Front Matter in the body, for example:\n\n\n\nThe previously defined properties will be passed to the component as frontmatter\nproperties. So the final output will be:\n\n\n\n\nCustom container#\n\nYou can use the ::: syntax to create custom containers and support custom\ntitles. For example:\n\nInput:\n\n\n\nOutput:\n\nTIP\n\nThis is a block of type tip\n\nINFO\n\nThis is a block of type info\n\nWARNING\n\nThis is a block of type warning\n\nDANGER\n\nThis is a block of type danger\n\nDETAILS\n\nThis is a block of type details\n\nCustom Title\n\nThis is a block of Custom Title\n\nCustom Title\n\nThis is a block of Custom Title\n\n\nCode block#\n\n\nBasic usage#\n\nYou can use the ``` syntax to create code blocks and support custom titles. For\nexample:\n\nInput:\n\n\n\nOutput:\n\n\n\n\n\n\nShow line numbers#\n\nIf you want to display line numbers, you can enable the showLineNumbers option\nin the config file:\n\n\n\n\nWrap code#\n\nIf you want to wrap long code line by default, you can enable the\ndefaultWrapCode option in the config file:\n\n\n\n\nLine highlighting#\n\nYou can also apply line highlighting and code block title at the same time, for\nexample:\n\nInput:\n\n\n\nOutput:\n\n\n\n\nRustify MDX compiler#\n\nYou can enable Rustify MDX compiler by following config:","routePath":"/guide/","lang":"","toc":[{"text":"Markdown","id":"markdown","depth":2,"charIndex":88},{"text":"Use component","id":"use-component","depth":2,"charIndex":198},{"text":"Front matter","id":"front-matter","depth":2,"charIndex":336},{"text":"Custom container","id":"custom-container","depth":2,"charIndex":767},{"text":"Code block","id":"code-block","depth":2,"charIndex":1190},{"text":"Basic usage","id":"basic-usage","depth":3,"charIndex":1204},{"text":"Show line numbers","id":"show-line-numbers","depth":3,"charIndex":1332},{"text":"Wrap code","id":"wrap-code","depth":3,"charIndex":1455},{"text":"Line highlighting","id":"line-highlighting","depth":3,"charIndex":1580},{"text":"Rustify MDX compiler","id":"rustify-mdx-compiler","depth":2,"charIndex":1712}],"domain":"","frontmatter":{},"version":""},{"id":14,"title":"Hello world!","content":"#\n\n\nStart#\n\nWrite something to build your own docs! 🎁","routePath":"/hello","lang":"","toc":[{"text":"Start","id":"start","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":16,"title":"高性能表现","content":"#\n\n5000个节点动画渲染流畅，性能优异。\n\n","routePath":"/perfomance/nodes","lang":"","toc":[],"domain":"","frontmatter":{},"version":""}]